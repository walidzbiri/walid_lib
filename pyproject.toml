[project]
name = "walid-lib"
version = "1.0.2" # Do not change manually !!
description = "Python package to test semver and conventionnal commits"
readme = "README.md"
authors = [
    { name = "walidzbiri", email = "walid.zbiri@uit.ac.ma" }
]
requires-python = ">=3.12"
dependencies = [
    "requests>=2.32.4",
]

[project.scripts]
walid-lib = "walid_lib:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[dependency-groups]
dev = [
    "mypy>=1.17.0",
    "pytest>=8.4.1",
    "pytest-cov>=6.2.1",
    "python-semantic-release>=10.2.0",
    "ruff>=0.12.5",
    "types-requests>=2.32.4.20250611",
]

[project.optional-dependencies]
build = ["uv ~= 0.7.18"]


[tool.semantic_release]
version_toml=[
    "pyproject.toml:project.version:nf"
]
build_command = """
    python -m pip install -e '.[build]'
    uv lock --upgrade-package "$PACKAGE_NAME"
    git add uv.lock
    uv build
"""


[tool.semantic_release.branches.main]
match = "(main|master)"
prerelease = false

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "W191",  # indentation contains tabs
]

[tool.ruff.lint.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
keep-runtime-typing = true