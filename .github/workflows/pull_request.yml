name: Pull request workflow

on:
  pull_request:
    branches: [ main ]

jobs:
  commit-check:
    name: Conventional Commits
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: webiny/action-conventional-commits@v1.3.0
  
  lint-format-test:
    runs-on: ubuntu-latest
    needs: commit-check
    steps:
      - uses: actions/checkout@v4
      - name: Install Python
        uses: actions/setup-python@v5
        with:
          python-version-file: "pyproject.toml"
      - name: Setup uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          cache-dependency-glob: uv.lock
      - name: Install dev dependencies
        run: uv sync --only-dev
      # Update output format to enable automatic inline annotations.
      - name: Run Ruff Linter
        run: uv run ruff check --output-format=github .
      # Update output format to enable automatic inline annotations.
      - name: Run Ruff formatter
        run: uv run ruff format --check
      - name: Run mypy static type checker
        run: uv run mypy src/
      - name: Run pytest
        run: uv run pytest --cov=src
  
  release-rc:
    name: Release RC Version
    runs-on: ubuntu-latest
    needs: lint-format-test
    concurrency:
      group: ${{ github.workflow }}-release-rc-${{ github.event.pull_request.number }}
      cancel-in-progress: false

    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Setup | Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0

      - name: Action | Semantic Version Release (RC)
        id: release
        uses: python-semantic-release/python-semantic-release@v10.2.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          git_committer_name: "github-actions"
          git_committer_email: "actions@users.noreply.github.com"

      - name: Upload | Distribution Artifacts
        uses: actions/upload-artifact@v4
        if: steps.release.outputs.released == 'true'
        with:
          name: rc-distribution-artifacts-${{ github.event.pull_request.number }}
          path: dist
          if-no-files-found: error

      - name: Comment | Add RC info to PR
        if: steps.release.outputs.released == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `ðŸš€ **Release Candidate Published**\n\nVersion: \`${{ steps.release.outputs.tag }}\`\n\nYou can test this RC version before merging to main.`
            })

  deploy-rc:
    name: Deploy RC to TestPyPI
    runs-on: ubuntu-latest
    needs: release-rc
    if: ${{ needs.release-rc.outputs.released == 'true' }}

    permissions:
      contents: read
      id-token: write

    steps:
      - name: Setup | Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: rc-distribution-artifacts-${{ github.event.pull_request.number }}
          path: dist

      - name: Publish RC to TestPyPI
        uses: pypa/gh-action-pypi-publish@v1.12.4
        with:
          repository-url: https://test.pypi.org/legacy/
          packages-dir: dist
          print-hash: true
          verbose: true